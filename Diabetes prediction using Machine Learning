{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Diabetes prediction using Machine Learning","provenance":[],"authorship_tag":"ABX9TyNr+oVc7mAifBFE0G8alhwo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Import the Dependencies"],"metadata":{"id":"yj2iRS__2s2-"}},{"cell_type":"code","execution_count":69,"metadata":{"id":"nixmHIPv2gaA","executionInfo":{"status":"ok","timestamp":1650463124924,"user_tz":-180,"elapsed":262,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.model_selection import train_test_split\n","from sklearn import svm \n","from sklearn.metrics import accuracy_score"]},{"cell_type":"markdown","source":["Data Collection and Analysis"],"metadata":{"id":"LCi3t0Hj4cO2"}},{"cell_type":"code","source":["diabetes = pd.read_csv('/content/diabetes.csv')\n"],"metadata":{"id":"JFysTx864k05","executionInfo":{"status":"ok","timestamp":1650456928739,"user_tz":-180,"elapsed":264,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["diabetes.head() "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"wmAcJcU35DWe","executionInfo":{"status":"ok","timestamp":1650456935889,"user_tz":-180,"elapsed":277,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"f246075b-309b-49cf-d861-48255128e89b"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n","0            6      148             72             35        0  33.6   \n","1            1       85             66             29        0  26.6   \n","2            8      183             64              0        0  23.3   \n","3            1       89             66             23       94  28.1   \n","4            0      137             40             35      168  43.1   \n","\n","   DiabetesPedigreeFunction  Age  Outcome  \n","0                     0.627   50        1  \n","1                     0.351   31        0  \n","2                     0.672   32        1  \n","3                     0.167   21        0  \n","4                     2.288   33        1  "],"text/html":["\n","  <div id=\"df-bbb0b164-3dbf-419d-9a45-a060d3e6d479\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DiabetesPedigreeFunction</th>\n","      <th>Age</th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6</td>\n","      <td>148</td>\n","      <td>72</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>33.6</td>\n","      <td>0.627</td>\n","      <td>50</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>85</td>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>0</td>\n","      <td>26.6</td>\n","      <td>0.351</td>\n","      <td>31</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>183</td>\n","      <td>64</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>23.3</td>\n","      <td>0.672</td>\n","      <td>32</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>89</td>\n","      <td>66</td>\n","      <td>23</td>\n","      <td>94</td>\n","      <td>28.1</td>\n","      <td>0.167</td>\n","      <td>21</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>137</td>\n","      <td>40</td>\n","      <td>35</td>\n","      <td>168</td>\n","      <td>43.1</td>\n","      <td>2.288</td>\n","      <td>33</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bbb0b164-3dbf-419d-9a45-a060d3e6d479')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-bbb0b164-3dbf-419d-9a45-a060d3e6d479 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-bbb0b164-3dbf-419d-9a45-a060d3e6d479');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["#number of rows and columns in the dataset\n","diabetes.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NXMiV8jS6zl5","executionInfo":{"status":"ok","timestamp":1650457354118,"user_tz":-180,"elapsed":403,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"9387bcc4-7049-415c-8ea6-9de58558b35e"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(768, 9)"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["#Statistical measures of the data\n","diabetes.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":284},"id":"O028NQvc7LCO","executionInfo":{"status":"ok","timestamp":1650457391127,"user_tz":-180,"elapsed":443,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"5dfef0e0-2afa-4680-f79a-7a5226b1861e"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\n","count   768.000000  768.000000     768.000000     768.000000  768.000000   \n","mean      3.845052  120.894531      69.105469      20.536458   79.799479   \n","std       3.369578   31.972618      19.355807      15.952218  115.244002   \n","min       0.000000    0.000000       0.000000       0.000000    0.000000   \n","25%       1.000000   99.000000      62.000000       0.000000    0.000000   \n","50%       3.000000  117.000000      72.000000      23.000000   30.500000   \n","75%       6.000000  140.250000      80.000000      32.000000  127.250000   \n","max      17.000000  199.000000     122.000000      99.000000  846.000000   \n","\n","              BMI  DiabetesPedigreeFunction         Age     Outcome  \n","count  768.000000                768.000000  768.000000  768.000000  \n","mean    31.992578                  0.471876   33.240885    0.348958  \n","std      7.884160                  0.331329   11.760232    0.476951  \n","min      0.000000                  0.078000   21.000000    0.000000  \n","25%     27.300000                  0.243750   24.000000    0.000000  \n","50%     32.000000                  0.372500   29.000000    0.000000  \n","75%     36.600000                  0.626250   41.000000    1.000000  \n","max     67.100000                  2.420000   81.000000    1.000000  "],"text/html":["\n","  <div id=\"df-a83c9a27-74b1-49fa-afc3-a2bef94e41e0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DiabetesPedigreeFunction</th>\n","      <th>Age</th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","      <td>768.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>3.845052</td>\n","      <td>120.894531</td>\n","      <td>69.105469</td>\n","      <td>20.536458</td>\n","      <td>79.799479</td>\n","      <td>31.992578</td>\n","      <td>0.471876</td>\n","      <td>33.240885</td>\n","      <td>0.348958</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>3.369578</td>\n","      <td>31.972618</td>\n","      <td>19.355807</td>\n","      <td>15.952218</td>\n","      <td>115.244002</td>\n","      <td>7.884160</td>\n","      <td>0.331329</td>\n","      <td>11.760232</td>\n","      <td>0.476951</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.078000</td>\n","      <td>21.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.000000</td>\n","      <td>99.000000</td>\n","      <td>62.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>27.300000</td>\n","      <td>0.243750</td>\n","      <td>24.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>3.000000</td>\n","      <td>117.000000</td>\n","      <td>72.000000</td>\n","      <td>23.000000</td>\n","      <td>30.500000</td>\n","      <td>32.000000</td>\n","      <td>0.372500</td>\n","      <td>29.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>6.000000</td>\n","      <td>140.250000</td>\n","      <td>80.000000</td>\n","      <td>32.000000</td>\n","      <td>127.250000</td>\n","      <td>36.600000</td>\n","      <td>0.626250</td>\n","      <td>41.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>17.000000</td>\n","      <td>199.000000</td>\n","      <td>122.000000</td>\n","      <td>99.000000</td>\n","      <td>846.000000</td>\n","      <td>67.100000</td>\n","      <td>2.420000</td>\n","      <td>81.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a83c9a27-74b1-49fa-afc3-a2bef94e41e0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a83c9a27-74b1-49fa-afc3-a2bef94e41e0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a83c9a27-74b1-49fa-afc3-a2bef94e41e0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["diabetes['Outcome'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lgKpyU-C704F","executionInfo":{"status":"ok","timestamp":1650457561837,"user_tz":-180,"elapsed":273,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"502199bc-e028-446d-c2b1-a8ba576cfd65"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    500\n","1    268\n","Name: Outcome, dtype: int64"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["0 is for non-diabetic\n","1 is for diabetic"],"metadata":{"id":"TAR4x51f8GrZ"}},{"cell_type":"code","source":["#separating the data from labels\n","X = diabetes.drop(columns = 'Outcome', axis = 1) #with this you drop the outcome of the last column. If you wanted to drop a row the axis would be 0.\n","Y = diabetes['Outcome']"],"metadata":{"id":"6h8yNQEu8lJ-","executionInfo":{"status":"ok","timestamp":1650457933272,"user_tz":-180,"elapsed":260,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["#To print the data you use the X because you droped the outcome column\n","print(X) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pZy5EGrF9ajG","executionInfo":{"status":"ok","timestamp":1650458025767,"user_tz":-180,"elapsed":5,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"e80f08e9-8f1a-4b3b-ee9a-95c0acf4ab8c"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n","0              6      148             72             35        0  33.6   \n","1              1       85             66             29        0  26.6   \n","2              8      183             64              0        0  23.3   \n","3              1       89             66             23       94  28.1   \n","4              0      137             40             35      168  43.1   \n","..           ...      ...            ...            ...      ...   ...   \n","763           10      101             76             48      180  32.9   \n","764            2      122             70             27        0  36.8   \n","765            5      121             72             23      112  26.2   \n","766            1      126             60              0        0  30.1   \n","767            1       93             70             31        0  30.4   \n","\n","     DiabetesPedigreeFunction  Age  \n","0                       0.627   50  \n","1                       0.351   31  \n","2                       0.672   32  \n","3                       0.167   21  \n","4                       2.288   33  \n","..                        ...  ...  \n","763                     0.171   63  \n","764                     0.340   27  \n","765                     0.245   30  \n","766                     0.349   47  \n","767                     0.315   23  \n","\n","[768 rows x 8 columns]\n"]}]},{"cell_type":"code","source":["#To print the outcome which is the result if someone is dibetic or not:\n","print(Y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PKHSnG7-995i","executionInfo":{"status":"ok","timestamp":1650458118146,"user_tz":-180,"elapsed":10,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"09ac131a-3215-4055-f840-a839d4ac8b04"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["0      1\n","1      0\n","2      1\n","3      0\n","4      1\n","      ..\n","763    0\n","764    0\n","765    0\n","766    1\n","767    0\n","Name: Outcome, Length: 768, dtype: int64\n"]}]},{"cell_type":"markdown","source":["**Pre-Processing the data (0,1)**"],"metadata":{"id":"mBVxhx0qOYCm"}},{"cell_type":"code","source":["#here you can see that the most of the patients are non-diabetic in the data sheet\n","sns.catplot(x='Outcome',kind='count',  data=diabetes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":386},"id":"kMhlMP1OPNdZ","executionInfo":{"status":"ok","timestamp":1650462697938,"user_tz":-180,"elapsed":715,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"7a878d10-2c4a-4f42-c71a-2a6158d1112d"},"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7fa8323e8cd0>"]},"metadata":{},"execution_count":62},{"output_type":"display_data","data":{"text/plain":["<Figure size 360x360 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#Here you can see the age of the patient on the datasheet\n","sns.displot(x='Age',multiple='stack',hue='Outcome', data=diabetes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":386},"id":"P_Xtfh3bP4Bj","executionInfo":{"status":"ok","timestamp":1650463359313,"user_tz":-180,"elapsed":1632,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"e0ef35f5-e858-4539-819c-9dcb8abc054a"},"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7fa82f383b90>"]},"metadata":{},"execution_count":71},{"output_type":"display_data","data":{"text/plain":["<Figure size 413.25x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#Here you can see the number of the patient with glucose from the datasheet\n","sns.displot(x='Glucose',multiple='stack',hue='Outcome', data=diabetes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":386},"id":"GvMdPmNVTU3h","executionInfo":{"status":"ok","timestamp":1650463737252,"user_tz":-180,"elapsed":3184,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"b935992e-cfbb-4fc7-a793-92921a082a7e"},"execution_count":72,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7fa82ed0f8d0>"]},"metadata":{},"execution_count":72},{"output_type":"display_data","data":{"text/plain":["<Figure size 413.25x360 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["Data Standardization"],"metadata":{"id":"-VypnZ0c-zDl"}},{"cell_type":"code","source":["scaler = StandardScaler()"],"metadata":{"id":"_SSc2eSP-2_z","executionInfo":{"status":"ok","timestamp":1650458355061,"user_tz":-180,"elapsed":263,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["#You can fit the data into standardscaler with this line of code:\n","scaler.fit(X) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R5JvunMJ_B5B","executionInfo":{"status":"ok","timestamp":1650458564052,"user_tz":-180,"elapsed":260,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"28388810-f108-4b81-88c1-ec51e2020ca8"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["StandardScaler()"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["#We trnasform this data\n","standardized_data = scaler.transform(X)"],"metadata":{"id":"p2aDwitS_KNE","executionInfo":{"status":"ok","timestamp":1650458561494,"user_tz":-180,"elapsed":7,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["#with the outcome you can see all the values in a range of 0 - 1. This is happening to help the model be more accurate\n","print(standardized_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xf7V11p9AHz6","executionInfo":{"status":"ok","timestamp":1650458706713,"user_tz":-180,"elapsed":252,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"476e9866-1fba-43c7-acdc-714cc68c0892"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.63994726  0.84832379  0.14964075 ...  0.20401277  0.46849198\n","   1.4259954 ]\n"," [-0.84488505 -1.12339636 -0.16054575 ... -0.68442195 -0.36506078\n","  -0.19067191]\n"," [ 1.23388019  1.94372388 -0.26394125 ... -1.10325546  0.60439732\n","  -0.10558415]\n"," ...\n"," [ 0.3429808   0.00330087  0.14964075 ... -0.73518964 -0.68519336\n","  -0.27575966]\n"," [-0.84488505  0.1597866  -0.47073225 ... -0.24020459 -0.37110101\n","   1.17073215]\n"," [-0.84488505 -0.8730192   0.04624525 ... -0.20212881 -0.47378505\n","  -0.87137393]]\n"]}]},{"cell_type":"code","source":["#So basically here the X represent the data and the Y represents the model \n","X = standardized_data\n","Y = diabetes['Outcome']"],"metadata":{"id":"vI-sJCcIAp2z","executionInfo":{"status":"ok","timestamp":1650458850714,"user_tz":-180,"elapsed":256,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}}},"execution_count":26,"outputs":[]},{"cell_type":"markdown","source":["Train Test Split"],"metadata":{"id":"YsEhSCHhBOm8"}},{"cell_type":"code","source":["X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state=2)"],"metadata":{"id":"hMUAQf5YBNxq","executionInfo":{"status":"ok","timestamp":1650459034036,"user_tz":-180,"elapsed":339,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["print(X.shape, X_train.shape, X_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lGMpUUkRE7lH","executionInfo":{"status":"ok","timestamp":1650459940751,"user_tz":-180,"elapsed":266,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"81cb2306-269e-4f32-90aa-160dcb426468"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["(768, 8) (614, 8) (154, 8)\n"]}]},{"cell_type":"markdown","source":["Training the model "],"metadata":{"id":"1muJdLgxFF4t"}},{"cell_type":"code","source":["classifier = svm.SVC(kernel = 'linear')"],"metadata":{"id":"zN06_kOkFH8Y","executionInfo":{"status":"ok","timestamp":1650460002927,"user_tz":-180,"elapsed":284,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["#training the support vector Machine Classifier\n","classifier.fit(X_train, Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3edkSRfAFRvU","executionInfo":{"status":"ok","timestamp":1650460105518,"user_tz":-180,"elapsed":268,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"d525d934-c747-4564-ad76-8dfdf056479a"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC(kernel='linear')"]},"metadata":{},"execution_count":34}]},{"cell_type":"markdown","source":["**Model Evaluation**"],"metadata":{"id":"ZpFVpQpkFxtB"}},{"cell_type":"markdown","source":["Accuracy Score"],"metadata":{"id":"hZGJqsL6F1Es"}},{"cell_type":"code","source":["#accuracy score on the training data\n","X_train_prediction = classifier.predict(X_train)\n","training_data_accuracy = accuracy_score(X_train_prediction,Y_train)"],"metadata":{"id":"zzszgBdIF0TS","executionInfo":{"status":"ok","timestamp":1650460327531,"user_tz":-180,"elapsed":3,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["print('Accuracy Score of the training data: ',training_data_accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QWyj0dWiGhpI","executionInfo":{"status":"ok","timestamp":1650460446909,"user_tz":-180,"elapsed":349,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"c657dcca-fc45-4b8b-a120-94780a333003"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy Score of the training data:  0.7866449511400652\n"]}]},{"cell_type":"code","source":["#accuracy score on the test data\n","X_test_prediction = classifier.predict(X_test)\n","test_data_accuracy = accuracy_score(X_test_prediction,Y_test)"],"metadata":{"id":"5lFWP4wMHPJH","executionInfo":{"status":"ok","timestamp":1650460583720,"user_tz":-180,"elapsed":268,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["print('Accuracy Score of the test data: ',test_data_accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q6ZoQIrjHYNW","executionInfo":{"status":"ok","timestamp":1650460585523,"user_tz":-180,"elapsed":253,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"da3bfcf3-d1d2-4c14-d44f-c6109840eb69"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy Score of the test data:  0.7727272727272727\n"]}]},{"cell_type":"markdown","source":["Predictive System"],"metadata":{"id":"unIrghYzIzCB"}},{"cell_type":"code","source":["input_data = (4,110,92,0,0,37.6,0.131,30)\n","\n","# to see the result you have to change the data into numpy data:\n","input_data_as_numpy_array = np.asarray(input_data)\n","\n","#reshape the array as we are predicting for one instance: (with the reshape the model gonna now that will make a preditcion for only one instance, otherwise will get confused)\n","input_data_reshaped = input_data_as_numpy_array.reshape(1,-1) #by giving the range 1,-1 will also is for one instance\n","\n","#standardized the input data\n","std_data = scaler.transform(input_data_reshaped)\n","\n","\n","prediction = classifier.predict(std_data)\n","\n","\n","if(prediction == 1):\n","    print('The peron is dibetic.')\n","    print('')\n","\n","else:\n","    print('The person is non-diabetic.')\n","    print('')\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8hAhYerSI2Iy","executionInfo":{"status":"ok","timestamp":1650461981908,"user_tz":-180,"elapsed":6,"user":{"displayName":"George Xenofontos","userId":"09636376413736276705"}},"outputId":"d5762304-1415-49e2-c226-8034b8594fdc"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["The person is non-diabetic.\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n","  \"X does not have valid feature names, but\"\n"]}]}]}